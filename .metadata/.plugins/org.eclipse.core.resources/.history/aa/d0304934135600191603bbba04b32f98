package application;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.RadioButton;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;

public class Controller extends Application {
//    @FXML
//    private RadioButton withdrawSelected, depositSelected;
    @FXML
    private javafx.scene.control.TextField accNum, firstName, lastName, phoneNum, emailAddress, openingBalance, minBalance, interestRate, findAccNum;
    @FXML
    private javafx.scene.control.Label errAccNum, errPhoneNum, errEmail, errOpeningBalance, errFirstName, errLastName, errMinBalance, errInterestRate, minimumBalanceLabel, interestRateLabel, amount, errorMessWD, errorMessWD1;
    @FXML
    private javafx.scene.control.Tab addAccount;
    @FXML
    private Button addAccountOkay;
    private boolean addingSavAcc = true;

    public static void main(String[] args) {
        launch(args);
    }

    @FXML
    protected void keyEvent(KeyEvent event) {
        if (event.getCode() == KeyCode.ENTER) {
            ActionEvent e = null;
            if (addAccount.isSelected()) {
                addAccount(e);
            }
        }
    }

    @FXML
    protected void handleSavAccSelected(ActionEvent event) {
        minimumBalanceLabel.setText("Minimum balance");
        minBalance.setPromptText("Enter minimum balance");
        interestRateLabel.setVisible(true);
        interestRate.setVisible(true);
        interestRate.setDisable(true);
        addingSavAcc = true;
    }

    @FXML
    protected void handleCheAccSelected(ActionEvent event) {
        minimumBalanceLabel.setText("Monthly Fee");
        minBalance.setPromptText("Enter monthly Fee");
        interestRateLabel.setVisible(false);
        interestRate.setVisible(false);
        interestRate.setDisable(false);
        addingSavAcc = false;
    }

    @FXML
    protected void addAccount(ActionEvent event) {
        boolean validInput = true;
        long accNumTemp = 0;
        String firstNameTemp = "";
        String lastNameTemp = "";
        String phoneNumTemp;
        String emailAddressTemp;
        double openingBalanceTemp = 0;
        if (InputFilter.validAccNum(accNum.getText())) {
            errAccNum.setVisible(false);
            accNumTemp = Long.parseLong(accNum.getText());
            if (Long.toString(accNumTemp).length() > 8) {
                validInput = false;
                errAccNum.setVisible(true);
                errAccNum.setText("Account number cannot have more than 8 digits");
            } else if (Bank.findAccount(accNumTemp, 0) != -1) {
                validInput = false;
                errAccNum.setVisible(true);
                errAccNum.setText("Account number already exists");
            }
        } else {
            validInput = false;
            errAccNum.setVisible(true);
            errAccNum.setText("Invalid account number");
        }
        if (firstName.getText().length() > 0) {
            errFirstName.setVisible(false);
            firstNameTemp = firstName.getText();
        } else {
            validInput = false;
            errFirstName.setVisible(true);
            errFirstName.setText("Please enter first name");
        }
        if (lastName.getText().length() > 0) {
            errLastName.setVisible(false);
            lastNameTemp = lastName.getText();
        } else {
            validInput = false;
            errLastName.setVisible(true);
            errLastName.setText("Please enter last name");
        }
        if (InputFilter.validPhoneNum(phoneNumTemp = phoneNum.getText())) {
            errPhoneNum.setVisible(false);
        } else {
            validInput = false;
            errPhoneNum.setVisible(true);
            errPhoneNum.setText("Enter numbers only");
        }
        if (InputFilter.validEmailAddress(emailAddressTemp = emailAddress.getText())) {
            errEmail.setVisible(false);
        } else {
            validInput = false;
            errEmail.setVisible(true);
            errEmail.setText("Invalid email address");
        }
        if (InputFilter.validBalance(openingBalance.getText())) {
            errOpeningBalance.setVisible(false);
            openingBalanceTemp = Double.parseDouble(openingBalance.getText());
        } else {
            validInput = false;
            errOpeningBalance.setVisible(true);
            errOpeningBalance.setText("Invalid opening balance");
        }
        if (addingSavAcc) {
            double minBalanceTemp = 0;
            double interestRateTemp = 0;
            if (InputFilter.validBalance(minBalance.getText())) {
                errMinBalance.setVisible(false);
                minBalanceTemp = Double.parseDouble(minBalance.getText());
            } else {
                errMinBalance.setVisible(true);
                errMinBalance.setText("Invalid minimum balance");
            }
            if (InputFilter.validBalance(interestRate.getText())) {
                errInterestRate.setVisible(false);
                interestRateTemp = Double.parseDouble(interestRate.getText());
                if (!(interestRateTemp <= 1 && interestRateTemp >= 0)) {
                    validInput = false;
                    errInterestRate.setVisible(true);
                    errInterestRate.setText("Interest rate has to be in (0,1)");
                }
            } else {
                validInput = false;
                errInterestRate.setVisible(true);
                errInterestRate.setText("Invalid interest rate");
            }
            if (validInput) {
                System.out.println("account added");
                Person personTemp = new Person(firstNameTemp, lastNameTemp, phoneNumTemp, emailAddressTemp);
                SavingsAccount bankAccountTemp = new SavingsAccount(accNumTemp, personTemp, openingBalanceTemp, minBalanceTemp, interestRateTemp);
                Bank.accounts.add(bankAccountTemp);
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("System info");
                alert.setHeaderText(null);
                alert.setContentText("Account added");
                alert.showAndWait();
            }
        }
    }

//    @FXML
//    protected void withdrawAndDeposit() {
//        boolean validOperation = true;
//        int index = 0;
//        double amountTemp = 0;
//        long accNumTemp = 0;
//        if (InputFilter.validAccNum(findAccNum.getText())) {
//            errorMessWD1.setText("");
//            if (Bank.findAccount(Long.parseLong(findAccNum.getText()),0) == -1){
//                validOperation = false;
//                errorMessWD1.setText("Cannot find account");
//            } else {
//                index = Bank.findAccount(Long.parseLong(findAccNum.getText()),0);
//            }
//        } else {
//            validOperation = false;
//            errorMessWD1.setText("Invalid account number");
//        }
//        if (InputFilter.validBalance(amount.getText())) {
//            errorMessWD.setText("");
//            amountTemp = Double.parseDouble(amount.getText());
//        } else {
//            validOperation = false;
//            errorMessWD.setText("Illegal amount");
//        }
//    }

    @Override
    public void start(Stage primaryStage) {
        try {
            Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("Lab9.fxml"));
            Scene scene = new Scene(root, 590, 400);
            primaryStage.setTitle("Bank Portal");
            primaryStage.setScene(scene);
            primaryStage.setResizable(false);
            primaryStage.show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

